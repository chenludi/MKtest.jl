Load packages
```julia
using MKtest
using CSV, DataFrames, JLD2
```
Parse sfs/div file
```julia
analysis_folder="analysis_smallc/orthononvip/"
gene_list="genelist/mammals_manual_nonVIP_controls.txt"
tgpfile="tgpfile/0416_tgp_smallc_vipinfo.tsv"
alpha, sfs, divergence = MKtest.parse_sfs(sample_size = 661, data =tgpfile ,gene_list=gene_list)
#the gene_list argument can be ignored when working on all the genes.
```
Calculate summary statistics
bootstrap equals to the number of gene list (rows) in gene_list file. Default value of bootstrap and threads is false.
```julia
adap = MKtest.parameters(n=661,dac=[1,2,4,5,10,20,50,100,200,400,500,661,925,1000])
@time summstat = MKtest.summary_statistics(param=adap,sfs=sfs,divergence=divergence,h5_file="./rates.jld2",analysis_folder=analysis_folder,summstat_size=10^5);
MKtest.ABCreg(analysis_folder=analysis_folder,P=5,S=size(adap.dac,1),tol=0.025,abcreg="../ABCreg/src/reg");
```
Plot
```julia
using RCall
include("./plot_map.jl")
vipsmap = plot_map(analysis_folder=analysis_folder)
DataFrames.describe(vipsmap[2])
CSV.write("analysis_smallc/orthovip/mapfull.tsv",DataFrames.describe(vipsmap[2]),delim="\t")
```

using MKtest, CSV, DataFrames, JLD2
using RCall
include("./plot_map.jl")

analysis_folder="analysis_smallc/orthowg/"
gene_list="genelist/mammals_orthologs.txt"
tgpfile="tgpfile/0416_tgp_smallc_vipinfo.tsv"

alpha, sfs, divergence = MKtest.parse_sfs(sample_size = 661, data =tgpfile ,gene_list=gene_list)
adap = MKtest.parameters(n=661,dac=[1,2,4,5,10,20,50,100,200,400,500,661,925,1000])
@time summstat = MKtest.summary_statistics(param=adap,sfs=sfs,divergence=divergence,h5_file="./rates.jld2",analysis_folder=analysis_folder,summstat_size=10^5);
MKtest.ABCreg(analysis_folder=analysis_folder,P=5,S=size(adap.dac,1),tol=0.025,abcreg="../ABCreg/src/reg");
vipsmap = plot_map(analysis_folder=analysis_folder)
DataFrames.describe(vipsmap[2])

CSV.write("analysis_smallc/orthowg/mapfull.tsv",DataFrames.describe(vipsmap[2]),delim="\t")

